{
  "name": "NTree",
  "props": {
    "accordion": {
      "value": "",
      "description": "Whether or not to use accordion unfolding mode",
      "default": "false",
      "type": "boolean",
      "description_zh": "是否使用手风琴展开模式"
    },
    "allow-checking-not-loaded": {
      "value": "",
      "description": "Whether to allow cascade checks for nodes that are not yet fully loaded. If you're going to use this property, keep in mind that 'checked-keys' may be incomplete, and be aware of the consistency between the checked-key behavior and the backend computation logic, especially if you have nodes disabled",
      "default": "false",
      "type": "boolean",
      "description_zh": "是否允许级联勾选还没有完全加载的节点。如果你要用这个属性，请记住 `checked-keys` 可能是不完整的，并且请注意勾选行为和后端计算逻辑的一致性，尤其是有禁用节点的情况下"
    },
    ":allow-drop": {
      "value": "",
      "description": "Whether to allow drop",
      "default": "一个不允许 drop 在叶节点内部的函数",
      "type": "(info: { dropPosition: DropPosition, node: TreeOption, phase: drag | drop }) => boolean",
      "description_zh": "是否允许 drop"
    },
    "animated": {
      "value": "",
      "description": "Whether there is an unfolding animation",
      "default": "true",
      "type": "boolean",
      "description_zh": "是否有展开动画"
    },
    "block-line": {
      "value": "",
      "description": "The entire row of nodes is stretched out",
      "default": "false",
      "type": "boolean",
      "description_zh": "节点整行撑开"
    },
    "block-node": {
      "value": "",
      "description": "The entire row of node names is stretched out",
      "default": "false",
      "type": "boolean",
      "description_zh": "节点名称整行撑开"
    },
    "cancelable": {
      "value": "",
      "description": "Check whether to allow cancellation after checking",
      "default": "true",
      "type": "boolean",
      "description_zh": "选中之后是否允许取消"
    },
    "cascade": {
      "value": "",
      "description": "Whether or not to associate options",
      "default": "false",
      "type": "boolean",
      "description_zh": "是否关联选项"
    },
    "check-strategy": {
      "value": "",
      "description": "Set the checkmark policy to specify the value returned by the checkback callback, 'all' indicates that the callback function value is all selected nodes; 'parent' indicates that the callback function value is the parent node (when all children under the parent node are selected); 'child' indicates that the callback function value is a child node",
      "default": "all",
      "type": "string",
      "description_zh": "设置勾选策略来指定勾选回调返回的值，`all` 表示回调函数值为全部选中节点；`parent` 表示回调函数值为父节点（当父节点下所有子节点都选中时）；`child` 表示回调函数值为子节点"
    },
    "checkable": {
      "value": "",
      "description": "Whether or not to display a selection box",
      "default": "false",
      "type": "boolean",
      "description_zh": "是否显示选择框"
    },
    "checkbox-placement": {
      "value": [
        "left",
        "right"
      ],
      "description": "The position of the checkbox",
      "default": "left",
      "type": "left / right",
      "description_zh": "复选框的位置"
    },
    "children-field": {
      "value": "",
      "description": "Override the children field name in 'TreeOption'",
      "default": "children",
      "type": "string",
      "description_zh": "替代 `TreeOption` 中的 children 字段名"
    },
    "checked-keys": {
      "value": "",
      "description": "If set, the 'checked' status is controlled",
      "default": "undefined",
      "type": "Array<string | number>",
      "description_zh": "如果设定则 `checked` 状态受控"
    },
    "check-on-click": {
      "value": "",
      "description": "Whether to allow clicking nodes to check will only take effect when 'checkable' is 'true'",
      "default": "false",
      "type": "boolean | ((node: TreeOption) => boolean)",
      "description_zh": "是否允许点击节点进行勾选，仅在 `checkable` 为 `true` 时生效"
    },
    ":data": {
      "value": "",
      "description": "Node data for the tree. Resetting 'data' will clear some of the uncontrolled state, and if you need to change 'data' in use, it's best to control the tree in a controlled way",
      "default": "[]",
      "type": "Array<TreeOption>",
      "description_zh": "树的节点数据。重新设置 `data` 会将一些非受控状态清空，如果你需要在使用中改动 `data`，最好以受控的方式控制树",
      "required": true
    },
    ":default-checked-keys": {
      "value": "",
      "description": "Multiple options are selected by default",
      "default": "[]",
      "type": "Array<string | number>",
      "description_zh": "默认选中的多选项"
    },
    "default-expand-all": {
      "value": "",
      "description": "Expand all options",
      "default": "false",
      "type": "boolean",
      "description_zh": "展开全部选项"
    },
    ":default-expanded-keys": {
      "value": "",
      "description": "The default expansion item",
      "default": "[]",
      "type": "Array<string | number>",
      "description_zh": "默认展开项"
    },
    ":default-selected-keys": {
      "value": "",
      "description": "The node is selected by default",
      "default": "[]",
      "type": "Array<string | number>",
      "description_zh": "默认选中的节点"
    },
    "draggable": {
      "value": "",
      "description": "Whether it can be dragged or not",
      "default": "false",
      "type": "boolean",
      "description_zh": "是否可拖拽"
    },
    "expand-on-dragenter": {
      "value": "",
      "description": "Whether to expand the node after dragging",
      "default": "true",
      "type": "boolean",
      "description_zh": "是否在拖入后展开节点"
    },
    "expand-on-click": {
      "value": "",
      "description": "Whether to expand or shrink a node after clicking it",
      "default": "false",
      "type": "boolean",
      "description_zh": "是否在点击节点后展开或收缩节点"
    },
    ":expanded-keys": {
      "value": "",
      "description": "If set, expand Control",
      "default": "undefined",
      "type": "Array<string | number>",
      "description_zh": "如果设定则展开受控"
    },
    ":filter": {
      "value": "",
      "description": "A function that specifies a filter node based on a pattern",
      "default": "一个简单的字符串过滤算法",
      "type": "(pattern: string, node: TreeOption) => boolean",
      "description_zh": "基于 pattern 指定过滤节点的函数"
    },
    ":get-children": {
      "value": "",
      "description": "Gets a sub-option of the current option",
      "default": "undefined",
      "type": "(option: any) => unknown",
      "description_zh": "获取当前选项的子选项"
    },
    ":indeterminate-keys": {
      "value": "",
      "description": "Partially select the key of the option",
      "default": "undefined",
      "type": "Array<string | number>",
      "description_zh": "部分选中选项的 key"
    },
    "keyboard": {
      "value": "",
      "description": "Whether keyboard operations are supported",
      "default": "true",
      "type": "boolean",
      "description_zh": "是否支持键盘操作"
    },
    "key-field": {
      "value": "",
      "description": "Override the key field name in 'TreeOption'",
      "default": "key",
      "type": "string",
      "description_zh": "替代 `TreeOption` 中的 key 字段名"
    },
    "label-field": {
      "value": "",
      "description": "Override the label field name in 'TreeOption'",
      "default": "label",
      "type": "string",
      "description_zh": "替代 `TreeOption` 中的 label 字段名"
    },
    "disabled-field": {
      "value": "",
      "description": "Override the disabled field name in 'TreeOption'",
      "default": "disabled",
      "type": "string",
      "description_zh": "替代 `TreeOption` 中的 disabled 字段名"
    },
    ":node-props": {
      "value": "",
      "description": "The HTML attribute of the node",
      "default": "undefined",
      "type": "(info: { option: TreeOption }) => HTMLAttributes",
      "description_zh": "节点的 HTML 属性"
    },
    "multiple": {
      "value": "",
      "description": "Specifies whether to allow multiple nodes to be selected",
      "default": "false",
      "type": "boolean",
      "description_zh": "是否允许节点多选"
    },
    "pattern": {
      "value": "",
      "description": "What is searched by default",
      "default": "",
      "type": "string",
      "description_zh": "默认搜索的内容"
    },
    ":render-label": {
      "value": "",
      "description": "A rendering function for the contents of the node",
      "default": "undefined",
      "type": "(info: { option: TreeOption, checked: boolean, selected: boolean }) => VNodeChild",
      "description_zh": "节点内容的渲染函数"
    },
    ":render-prefix": {
      "value": "",
      "description": "Rendering function for node prefixes",
      "default": "undefined",
      "type": "(info: { option: TreeOption, checked: boolean, selected: boolean }) => VNodeChild",
      "description_zh": "节点前缀的渲染函数"
    },
    ":render-suffix": {
      "value": "",
      "description": "Rendering function for node suffixes",
      "default": "undefined",
      "type": "(info: { option: TreeOption, checked: boolean, selected: boolean }) => VNodeChild",
      "description_zh": "节点后缀的渲染函数"
    },
    ":render-switcher-icon": {
      "value": "",
      "description": "The rendering function of the node expansion switch",
      "default": "undefined",
      "type": "(props: { option: TreeOption, expanded: boolean, selected: boolean }) => VNodeChild",
      "description_zh": "节点展开开关的渲染函数"
    },
    ":scrollbar-props": {
      "value": "",
      "description": "Attribute Reference [Scrollbar props](scrollbar#Scrollbar-Props)",
      "default": "undefined",
      "type": "object",
      "description_zh": "属性参考 [Scrollbar props](scrollbar#Scrollbar-Props)"
    },
    "selectable": {
      "value": "",
      "description": "Whether the node can be selected",
      "default": "true",
      "type": "boolean",
      "description_zh": "节点是否可以被选中"
    },
    ":selected-keys": {
      "value": "",
      "description": "If set, the 'selected' status is controlled",
      "default": "undefined",
      "type": "Array<string | number>",
      "description_zh": "如果设定则 `selected` 状态受控"
    },
    "show-irrelevant-nodes": {
      "value": "",
      "description": "Whether the search status displays nodes that are not related to the search",
      "default": "true",
      "type": "boolean",
      "description_zh": "是否在搜索状态显示和搜索无关的节点"
    },
    "show-line": {
      "value": "",
      "description": "Whether or not to display the connection line",
      "default": "false",
      "type": "boolean",
      "description_zh": "是否显示连接线"
    },
    "virtual-scroll": {
      "value": "",
      "description": "Whether to enable virtual scrolling, you need to set the height style of the tree before enabling it",
      "default": "false",
      "type": "boolean",
      "description_zh": "是否启用虚拟滚动，启用前你需要设定好树的高度样式"
    },
    ":watch-props": {
      "value": "",
      "description": "The default properties that need to be detected for changes, after which the component state is updated. Note: 'watch-props' are not inherently reactive",
      "default": "undefined",
      "type": "Array<defaultCheckedKeys | defaultSelectedKeys |defaultExpandedKeys>",
      "description_zh": "需要检测变更的默认属性，检测后组件状态会更新。注意：`watch-props` 本身不是响应式的"
    }
  },
  "methods": [
    {
      "name": "scrollTo",
      "description": "Scroll to a node in virtual scroll mode",
      "params": "在虚拟滚动模式下滚动到某个节点",
      "description_zh": "在虚拟滚动模式下滚动到某个节点"
    },
    {
      "name": "getCheckedData",
      "description": "Get the selected data",
      "params": "获取选中的数据",
      "description_zh": "获取选中的数据"
    },
    {
      "name": "getIndeterminateData",
      "description": "Get half-selected data",
      "params": "获取半选的数据",
      "description_zh": "获取半选的数据"
    }
  ],
  "typeDetail": {
    "TreeOption": [
      {
        "name": "key",
        "description": "节点的 `key`，需要唯一，可使用 `key-field` 修改字段名",
        "type": "string | number"
      },
      {
        "name": "label",
        "description": "节点的内容，可使用 `label-field` 修改字段名",
        "type": "string"
      },
      {
        "name": "checkboxDisabled?",
        "description": "是否禁用节点的 checkbox",
        "type": "boolean"
      },
      {
        "name": "children?",
        "description": "节点的子节点",
        "type": "TreeOption[]"
      },
      {
        "name": "disabled?",
        "description": "是否禁用节点",
        "type": "boolean"
      },
      {
        "name": "isLeaf?",
        "description": "节点是否是叶节点，在异步展开状态下是必须的",
        "type": "boolean"
      },
      {
        "name": "prefix?",
        "description": "节点的前缀",
        "type": "string | (() => VNodeChild)"
      },
      {
        "name": "suffix?",
        "description": "节点的后缀",
        "type": "string | (() => VNodeChild)"
      }
    ]
  },
  "events": [
    {
      "name": "load",
      "description": "The callback function that loads data asynchronously, if the data is not loaded you should make the Promise resolve 'false' or reject the Promise, otherwise the loading animation will not stop",
      "params": "(node: TreeOption) => Promise<unknown>",
      "description_zh": "异步加载数据的回调函数，如果没有加载到数据你应该让 Promise resolve `false` 或者 reject 这个 Promise，否则加载动画不会停止"
    },
    {
      "name": "dragend",
      "description": "The callback function after the node completes the drag and drop action",
      "params": "(data: { node: TreeOption, event: DragEvent }) => void",
      "description_zh": "节点完成拖拽动作后的回调函数"
    },
    {
      "name": "dragenter",
      "description": "The callback function in node dragging",
      "params": "(data: { node: TreeOption, event: DragEvent }) => void",
      "description_zh": "节点拖拽中的回调函数"
    },
    {
      "name": "dragleave",
      "description": "A callback function that drags a node and leaves other nodes",
      "params": "(data: { node: TreeOption, event: DragEvent }) => void",
      "description_zh": "拖拽一个节点，该节点离开其它节点后的回调函数"
    },
    {
      "name": "dragstart",
      "description": "Start dragging and dropping the callback function of a node",
      "params": "(data: { node: TreeOption, event: DragEvent }) => void",
      "description_zh": "开始拖拽某一个节点的回调函数"
    },
    {
      "name": "drop",
      "description": "The callback function after the node completes the drag and drop action",
      "params": "(data: { node: TreeOption, dragNode: TreeOption, dropPosition: before | inside | after, event: DragEvent }) => void",
      "description_zh": "节点完成拖拽动作后的回调函数"
    },
    {
      "name": "update:checked-keys",
      "description": "A callback function when the node tick option changes",
      "params": "(keys: Array<string | number>, option: Array<TreeOption | null>, meta: { node: TreeOption | null, action: check | uncheck }) => void",
      "description_zh": "节点勾选项发生变化时的回调函数"
    },
    {
      "name": "update:indeterminate-keys",
      "description": "A callback function when the node partial tick option changes",
      "params": "(keys: Array<string | number>, option: Array<TreeOption | null>) => void",
      "description_zh": "节点部分勾选项发生变化时的回调函数"
    },
    {
      "name": "update:expanded-keys",
      "description": "A callback function when a node expansion item changes",
      "params": "(keys: Array<string | number>, option: Array<TreeOption | null>, meta: { node: TreeOption | null, action: expand | collapse | filter }) => void",
      "description_zh": "节点展开项发生变化时的回调函数"
    },
    {
      "name": "update:selected-keys",
      "description": "The callback function when the selected item of the node changes",
      "params": "(keys: Array<string | number>, option: Array<TreeOption | null>, meta: { node: TreeOption, action: select | unselect }) => void",
      "description_zh": "节点选中项发生变化时的回调函数"
    }
  ],
  "link": "https://www.naiveui.com/en-US/dark/components/tree",
  "link_zh": "https://www.naiveui.com/zh-CN/dark/components/tree"
}
